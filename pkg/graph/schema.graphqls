enum ModelType {
  HUGGINGFACE
  OPENAI
  EXTERNAL
}

enum RepositoryType {
  GITHUB
  GITLAB
  BITBUCKET
}

enum StorageType {
  REDIS
  POSTGRES
  ELASTICSEARCH
}

enum ModelStatus {
  NOT_DEPLOYED
  DEPLOYING
  READY
  ERROR
}

enum StorageStatus {
  NOT_DEPLOYED
  DEPLOYING
  READY
  ERROR
}

enum PipelineType {
  REPOSITORY_EMBEDDINGS
}

enum PipelineStatus {
  READY
  RUNNING
  ERROR
}

enum PipelineExecutionStatus {
  ACTIVE
  SUCCEEDED
  FAILED
  PENDING
}

type Repository {
  id: ID!
  type: RepositoryType!
  displayName: String!
  owner: String!
  name: String!
  url: String!
}

type RepositoryEmbeddings {
  repositoryID: ID!
  modelID: ID!
  storageID: ID!
}

type HuggingFace {
  organization: String!
  name: String!
  maxSequenceLength: Int!
}

type ModelDeployment {
  enabled: Boolean!
  cpu: String!
  memory: String!
}

type Model {
  id: ID!
  type: ModelType!
  displayName: String!
  status: ModelStatus!
  huggingFace: HuggingFace
  deployment: ModelDeployment
}

type Storage {
  id: ID!
  name: String!
  type: StorageType!
  status: StorageStatus!
  deployment: StorageDeployment
}

type StorageDeployment {
  enabled: Boolean!
  cpu: String!
  memory: String!
}

type Pipeline {
  id: ID!
  name: String!
  type: PipelineType!
  enabled: Boolean!
  status: PipelineStatus!
  repositoryEmbeddings: RepositoryEmbeddings
}

type PipelineExecution {
  id: ID!
  status: PipelineExecutionStatus!
}

input QueryInput {
  query: String!
  page: Int
  limit: Int
}

type SearchResult {
  id: ID!
  chunkID: Int!
  content: String!
  hash: String!
  path: String!
  owner: String!
  repo: String!
  startIndex: Int!
  endIndex: Int!
  # Helper for the UI to show the line number
  startLine: Int!
  score: Float!
}

type Query {
  models: [Model!]!
  getModel(id: ID!): Model!
  repositories: [Repository!]!
  getRepository(id: ID!): Repository!
  storages: [Storage!]!
  getStorage(id: ID!): Storage!
  pipelines: [Pipeline!]!
  getPipeline(id: ID!): Pipeline!
  getPipelineExecutions(id: ID!): [PipelineExecution!]!
  semanticSearch(query: QueryInput!): [SearchResult!]!
}

input AddRepositoryInput {
  # url or owner and name should be provided
  url: String
  token: String

  type: RepositoryType
  owner: String
  name: String
  branch: String
}

input HuggingFaceInput {
  organization: String!
  name: String!
  maxSequenceLength: Int!
}

input AddModelInput {
  type: ModelType!
  huggingFace: HuggingFaceInput
}

input AddModelDeploymentInput {
  id: ID!
  cpu: String!
  memory: String!
}

input PostgresInput {
  external: Boolean!
  host: String!
  port: Int!
  username: String!
  password: String!
  database: String!
  SSLMode: String!
  timezone: String!
}

input AddStorageInput {
  type: StorageType!
  name: String!
  postgres: PostgresInput
}

input AddStorageDeploymentInput {
  id: ID!
  cpu: String!
  memory: String!
}

input AddPipelineInput {
  type: PipelineType!
  name: String!
  repositoryEmbeddings: AddRepositoryEmbeddingsInput
}

input AddRepositoryEmbeddingsInput {
  repositoryID: ID!
  modelID: ID!
  storageID: ID!
}

input AddPipelineDeploymentInput {
  id: ID!
  enabled: Boolean!
}

type Mutation {
  addModel(input: AddModelInput!): Model!
  addModelDeployment(input: AddModelDeploymentInput!): Model!
  deleteModel(id: ID!): Model!
  addRepository(input: AddRepositoryInput!): Repository!
  deleteRepository(id: ID!): Repository!
  addStorage(input: AddStorageInput!): Storage!
  addStorageDeployment(input: AddStorageDeploymentInput!): Storage!
  deleteStorage(id: ID!): Storage!
  addPipeline(input: AddPipelineInput!): Pipeline!
  # Rename this to enablePipeline
  addPipelineDeployment(input: AddPipelineDeploymentInput!): Pipeline!
  triggerPipeline(id: ID!): PipelineExecution!
  deletePipeline(id: ID!): Pipeline!
}
