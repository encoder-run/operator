// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddModelInput struct {
	Type             ModelType               `json:"type"`
	HuggingFaceModel *HuggingFaceConfigInput `json:"huggingFaceModel,omitempty"`
}

type HuggingFaceConfig struct {
	Organization string `json:"organization"`
	Model        string `json:"model"`
}

type HuggingFaceConfigInput struct {
	Organization string `json:"organization"`
	Model        string `json:"model"`
}

type Model struct {
	ID               string             `json:"id"`
	Type             ModelType          `json:"type"`
	HuggingFaceModel *HuggingFaceConfig `json:"huggingFaceModel,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type ModelType string

const (
	ModelTypeHuggingFace ModelType = "HUGGING_FACE"
	ModelTypeExternal    ModelType = "EXTERNAL"
)

var AllModelType = []ModelType{
	ModelTypeHuggingFace,
	ModelTypeExternal,
}

func (e ModelType) IsValid() bool {
	switch e {
	case ModelTypeHuggingFace, ModelTypeExternal:
		return true
	}
	return false
}

func (e ModelType) String() string {
	return string(e)
}

func (e *ModelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ModelType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ModelType", str)
	}
	return nil
}

func (e ModelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
